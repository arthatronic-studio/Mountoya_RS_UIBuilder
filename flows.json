[
    {
        "id": "93cd7eb94b5de81b",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e1fca49e72b6731a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d578f4fe739b97e1",
        "type": "group",
        "z": "93cd7eb94b5de81b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b8c02fcd2c609e5c",
            "17ab1c42ddaf528e",
            "758999591f8ebe39",
            "469a305550126563",
            "5abc403c3b97e6f1",
            "c02cf9ec2d477c84",
            "394d191e7e96a9a4",
            "134758b8c75a732d",
            "ce57fc889764cc90",
            "601ead6dbd164430",
            "f5b5f22f06ec8307",
            "eb7f14736e65d017",
            "312281ef99a7932b",
            "3fe8a8f19bd636d7",
            "626ec8f2db706571",
            "a4b0ee05af245390",
            "1542bb694a175939",
            "f4c26c95e4142031",
            "d9fdcdddae92825b",
            "e70a7eac5aa1292c",
            "8a9efa6ca4907eb8",
            "4095d80339d4fc03",
            "dc639336ccb6d507",
            "7de43cfe5c5c9225",
            "497afc4d7511892e",
            "5dce08f35cb8b6cf",
            "cfa57155488fe092",
            "46bc2f93d48c087d",
            "42138cb1cb3b3dcd",
            "f7de393883dfc617",
            "d5c78e7d3ece6868",
            "c261d518ebc079f0",
            "ae945c1acac3f873",
            "58cd9e4840d784ae",
            "996331d83b614a49",
            "9dbc0a797a97d227",
            "f04b7f82a4777b77",
            "e6d167a8f11d18c3",
            "a96796d7a57369e9",
            "8180848f581502a1",
            "674226255c184b27",
            "97a3c2112af1fec0",
            "ee35fa8f00e5fb60",
            "813a5d152d4efffd",
            "f1c25ce41202d813",
            "9e715bfcb567f4aa",
            "8259c8deb91a5620",
            "ab6dc3d12e5bfd40"
        ],
        "x": 74,
        "y": -1,
        "w": 1842,
        "h": 582
    },
    {
        "id": "47a9baa3568d6361",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "d589d2ac4b631e43",
        "type": "ui_tab",
        "name": "Tab 1",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "40507c23145c1473",
        "type": "ui_tab",
        "name": "Tab 2",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "2c8dac57508989f9",
        "type": "ui_group",
        "name": "admin",
        "tab": "d589d2ac4b631e43",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dashboard_group",
        "type": "ui_group",
        "name": "Default",
        "tab": "dashboard_tab",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false
    },
    {
        "id": "dashboard_tab",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "f7de393883dfc617",
        "type": "file",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Log Data",
        "filename": "/home/arthatronic/Documents/log_rs.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 560,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b8c02fcd2c609e5c",
        "type": "rpi-gpio in",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "IR Sensor Bott",
        "pin": "18",
        "intype": "up",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 180,
        "y": 280,
        "wires": [
            [
                "58cd9e4840d784ae"
            ]
        ]
    },
    {
        "id": "17ab1c42ddaf528e",
        "type": "switch",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Switch on type",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "button1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "button2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "button3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "button4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "button5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "button6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1120,
        "y": 240,
        "wires": [
            [],
            [
                "758999591f8ebe39"
            ],
            [
                "469a305550126563"
            ],
            [
                "134758b8c75a732d"
            ],
            [
                "c02cf9ec2d477c84"
            ],
            [
                "394d191e7e96a9a4"
            ],
            [
                "46bc2f93d48c087d"
            ]
        ]
    },
    {
        "id": "758999591f8ebe39",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Button 2 Action 250 ml normal",
        "func": "msg.payload = 6\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 160,
        "wires": [
            [
                "4095d80339d4fc03"
            ]
        ]
    },
    {
        "id": "469a305550126563",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Button 3 Action 250 ml cold",
        "func": "// msg.payload = 6 // Calibrated\nmsg.payload = 4\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 200,
        "wires": [
            [
                "dc639336ccb6d507"
            ]
        ]
    },
    {
        "id": "5abc403c3b97e6f1",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Button 1 Action 250 ml hot",
        "func": "msg.payload = msg.payload; // Assuming msg.payload is a number\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 120,
        "wires": [
            [
                "8a9efa6ca4907eb8"
            ]
        ]
    },
    {
        "id": "c02cf9ec2d477c84",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Button 5 Action 500 ml normal",
        "func": "msg.payload = 11.5\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 300,
        "wires": [
            [
                "497afc4d7511892e"
            ]
        ]
    },
    {
        "id": "394d191e7e96a9a4",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Button 6 Action 500 ml cold",
        "func": "// msg.payload = 12.5 // Calibrated\nmsg.payload = 10\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 340,
        "wires": [
            [
                "5dce08f35cb8b6cf"
            ]
        ]
    },
    {
        "id": "134758b8c75a732d",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Button 4 Action 500 ml hot",
        "func": "msg.payload = 14\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 260,
        "wires": [
            [
                "7de43cfe5c5c9225"
            ]
        ]
    },
    {
        "id": "ce57fc889764cc90",
        "type": "uibuilder",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "",
        "topic": "",
        "url": "refill",
        "okToGo": true,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "blank",
        "extTemplate": "",
        "showfolder": false,
        "reload": false,
        "sourceFolder": "src",
        "deployedVersion": "6.8.2",
        "showMsgUib": false,
        "title": "",
        "descr": "",
        "x": 790,
        "y": 280,
        "wires": [
            [
                "17ab1c42ddaf528e"
            ],
            []
        ]
    },
    {
        "id": "601ead6dbd164430",
        "type": "link in",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "link in 2",
        "links": [
            "f5b5f22f06ec8307",
            "eb7f14736e65d017",
            "312281ef99a7932b",
            "3fe8a8f19bd636d7",
            "626ec8f2db706571",
            "a4b0ee05af245390"
        ],
        "x": 275,
        "y": 460,
        "wires": [
            [
                "ce57fc889764cc90",
                "04e96e931192cd25",
                "9dbc0a797a97d227"
            ]
        ]
    },
    {
        "id": "f5b5f22f06ec8307",
        "type": "link out",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "601ead6dbd164430"
        ],
        "x": 1875,
        "y": 120,
        "wires": []
    },
    {
        "id": "eb7f14736e65d017",
        "type": "link out",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "601ead6dbd164430"
        ],
        "x": 1875,
        "y": 160,
        "wires": []
    },
    {
        "id": "312281ef99a7932b",
        "type": "link out",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "601ead6dbd164430"
        ],
        "x": 1875,
        "y": 200,
        "wires": []
    },
    {
        "id": "3fe8a8f19bd636d7",
        "type": "link out",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "601ead6dbd164430"
        ],
        "x": 1875,
        "y": 260,
        "wires": []
    },
    {
        "id": "626ec8f2db706571",
        "type": "link out",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "601ead6dbd164430"
        ],
        "x": 1875,
        "y": 300,
        "wires": []
    },
    {
        "id": "a4b0ee05af245390",
        "type": "link out",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "601ead6dbd164430"
        ],
        "x": 1875,
        "y": 340,
        "wires": []
    },
    {
        "id": "1542bb694a175939",
        "type": "rpi-gpio out",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "",
        "pin": "8",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 520,
        "y": 40,
        "wires": []
    },
    {
        "id": "f4c26c95e4142031",
        "type": "rpi-gpio out",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "",
        "pin": "25",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 380,
        "y": 40,
        "wires": []
    },
    {
        "id": "d9fdcdddae92825b",
        "type": "rpi-gpio out",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "",
        "pin": "24",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "e70a7eac5aa1292c",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "waterflow_Function v2",
        "func": "\n\nlet pulseCount = context.get('pulseCount') || 0;\nlet totalLiters = context.get('totalLiters') || 0;\nlet volumeliters = context.get('volumeliters') || 0;\n// let volumeliters = msg.payload.nilaiWaterflow || 0;\nconst calibrationFactor = 1; // Ganti dengan faktor kalibrasi sensor Anda\n\n// Menghitung aliran dan total liter setiap detik\nif (msg.payload === 1) { // Sensor mengirimkan pulsa (misalnya, 1) setiap kali terjadi\n    pulseCount++;\n}\n\nlet sendPulse = pulseCount;\n\nconst duration = 1.0; // durasi dalam detik\nlet flowRate = (pulseCount / calibrationFactor); // aliran dalam liter per detik\nif (msg.payload.status === 'send') {\n    // totalLiters = msg.payload.nilaiWaterflow;\n    volumeliters = msg.payload.nilaiWaterflow;\n    // totalLiters = volumeliters;\n}\nelse {\n    totalLiters += flowRate * duration; // hitung total liter yang sudah mengalir\n    // volumeliters += totalLiters;\n    // volumeliters = volumeliters * 6;\n    // volumeliters += 6.647 * totalLiters + 9.328;\n    volumeliters += 6.647 * sendPulse + 9.328;\n    volumeliters = volumeliters/4;\n}\n\n\npulseCount = 0; // reset pulse count\n\n// Simpan nilai di context\ncontext.set('pulseCount', pulseCount);\ncontext.set('totalLiters', totalLiters);\ncontext.set('volumeliters', volumeliters);\n\nmsg.payload = {\n    flowRate: flowRate.toFixed(2),\n    totalLiters: totalLiters.toFixed(2),\n    volumeliters: parseInt(volumeliters.toFixed(0)),\n    // volumeliters: sendPulse\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 440,
        "wires": [
            [
                "ce57fc889764cc90",
                "f1c25ce41202d813"
            ]
        ]
    },
    {
        "id": "8a9efa6ca4907eb8",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Set Relay Time",
        "func": " \nlet pin_IR_ATAS = 18;\nlet pin_IR_BAWAH = 23;\nlet pin_Relay = 8;\nlet count = 0;\nlet timer = msg.payload * 1000;\nlet counting = false;\nlet prevCount = 0;\nlet state_IR_ATAS = 0;\nlet state_IR_BAWAH = 0;\n\nconst IR_ATAS = new onoff.Gpio(pin_IR_ATAS, 'in', 'both');\nconst IR_BAWAH = new onoff.Gpio(pin_IR_BAWAH, 'in', 'both');\nconst Relay = new onoff.Gpio(pin_Relay, 'out');\n\nstate_IR_ATAS = IR_ATAS.readSync();\nstate_IR_BAWAH = IR_BAWAH.readSync();\nprevCount = Date.now();\nlet stopTimer = Date.now();\ncount = 0;\n\nwhile (count < timer && Date.now()-stopTimer < 5000) {\n    state_IR_ATAS = IR_ATAS.readSync();\n    state_IR_BAWAH = IR_BAWAH.readSync();\n    if (state_IR_ATAS === 1 || state_IR_BAWAH === 1) {\n        if (!counting) {\n            counting = true;\n            prevCount = Date.now() - count;\n        }\n        stopTimer = Date.now();\n        count = Date.now() - prevCount;\n        Relay.writeSync(1);\n    }\n    else {\n        if (counting) {\n            counting = false;\n        }\n        Relay.writeSync(0);\n    }\n    // setTimeout(() => {\n    //     count += 10;\n    // }, 10);\n}\n\nRelay.writeSync(0);\n\nconst d = new Date();\n\nmsg.payload = {\n    finish: 'done',\n    time: d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds(),\n    date: d.getFullYear() + \"-\" + d.getMonth() + \"-\" + d.getDate(),\n    volume: 250,\n    temperature: 'hot'\n}\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "onoff",
                "module": "onoff"
            }
        ],
        "x": 1720,
        "y": 120,
        "wires": [
            [
                "f5b5f22f06ec8307"
            ]
        ]
    },
    {
        "id": "4095d80339d4fc03",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Set Relay Time",
        "func": "\nlet pin_IR_ATAS = 18;\nlet pin_IR_BAWAH = 23;\nlet pin_Relay = 25;\nlet count = 0;\nlet timer = msg.payload * 1000;\nlet counting = false;\nlet prevCount = 0;\nlet state_IR_ATAS = 0;\nlet state_IR_BAWAH = 0;\n\nconst IR_ATAS = new onoff.Gpio(pin_IR_ATAS, 'in', 'both');\nconst IR_BAWAH = new onoff.Gpio(pin_IR_BAWAH, 'in', 'both');\nconst Relay = new onoff.Gpio(pin_Relay, 'out');\n\nstate_IR_ATAS = IR_ATAS.readSync();\nstate_IR_BAWAH = IR_BAWAH.readSync();\nprevCount = Date.now();\nlet stopTimer = Date.now();\ncount = 0;\n\nwhile (count < timer && Date.now()-stopTimer < 5000) {\n    state_IR_ATAS = IR_ATAS.readSync();\n    state_IR_BAWAH = IR_BAWAH.readSync();\n    if (state_IR_ATAS === 1 || state_IR_BAWAH === 1) {\n        if (!counting) {\n            counting = true;\n            prevCount = Date.now() - count;\n        }\n        stopTimer = Date.now();\n        count = Date.now() - prevCount;\n        Relay.writeSync(1);\n    }\n    else {\n        if (counting) {\n            counting = false;\n        }\n        Relay.writeSync(0);\n    }\n    // setTimeout(() => {\n    //     count += 10;\n    // }, 10);\n}\n\nRelay.writeSync(0);\n\nconst d = new Date();\n\nmsg.payload = {\n    finish: 'done',\n    time: d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds(),\n    date: d.getFullYear() + \"-\" + d.getMonth() + \"-\" + d.getDate(),\n    volume: 250,\n    temperature: 'normal'\n}\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "onoff",
                "module": "onoff"
            }
        ],
        "x": 1720,
        "y": 160,
        "wires": [
            [
                "eb7f14736e65d017"
            ]
        ]
    },
    {
        "id": "dc639336ccb6d507",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Set Relay Time",
        "func": "\nlet pin_IR_ATAS = 18;\nlet pin_IR_BAWAH = 23;\nlet pin_Relay = 24;\nlet count = 0;\nlet timer = msg.payload * 1000;\nlet counting = false;\nlet prevCount = 0;\nlet state_IR_ATAS = 0;\nlet state_IR_BAWAH = 0;\n\nconst IR_ATAS = new onoff.Gpio(pin_IR_ATAS, 'in', 'both');\nconst IR_BAWAH = new onoff.Gpio(pin_IR_BAWAH, 'in', 'both');\nconst Relay = new onoff.Gpio(pin_Relay, 'out');\n\nstate_IR_ATAS = IR_ATAS.readSync();\nstate_IR_BAWAH = IR_BAWAH.readSync();\nprevCount = Date.now();\nlet stopTimer = Date.now();\ncount = 0;\n\nwhile (count < timer && Date.now()-stopTimer < 5000) {\n    state_IR_ATAS = IR_ATAS.readSync();\n    state_IR_BAWAH = IR_BAWAH.readSync();\n    if (state_IR_ATAS === 1 || state_IR_BAWAH === 1) {\n        if (!counting) {\n            counting = true;\n            prevCount = Date.now() - count;\n        }\n        stopTimer = Date.now();\n        count = Date.now() - prevCount;\n        Relay.writeSync(1);\n    }\n    else {\n        if (counting) {\n            counting = false;\n        }\n        Relay.writeSync(0);\n    }\n    // setTimeout(() => {\n    //     count += 10;\n    // }, 10);\n}\n\nRelay.writeSync(0);\n\nconst d = new Date();\n\nmsg.payload = {\n    finish: 'done',\n    time: d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds(),\n    date: d.getFullYear() + \"-\" + d.getMonth() + \"-\" + d.getDate(),\n    volume: 250,\n    temperature: 'cold'\n}\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "onoff",
                "module": "onoff"
            }
        ],
        "x": 1720,
        "y": 200,
        "wires": [
            [
                "312281ef99a7932b"
            ]
        ]
    },
    {
        "id": "7de43cfe5c5c9225",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Set Relay Time",
        "func": "\nlet pin_IR_ATAS = 18;\nlet pin_IR_BAWAH = 23;\nlet pin_Relay = 8;\nlet count = 0;\nlet timer = msg.payload * 1000;\nlet counting = false;\nlet prevCount = 0;\nlet state_IR_ATAS = 0;\nlet state_IR_BAWAH = 0;\n\nconst IR_ATAS = new onoff.Gpio(pin_IR_ATAS, 'in', 'both');\nconst IR_BAWAH = new onoff.Gpio(pin_IR_BAWAH, 'in', 'both');\nconst Relay = new onoff.Gpio(pin_Relay, 'out');\n\nstate_IR_ATAS = IR_ATAS.readSync();\nstate_IR_BAWAH = IR_BAWAH.readSync();\nprevCount = Date.now();\nlet stopTimer = Date.now();\ncount = 0;\n\nwhile (count < timer && Date.now()-stopTimer < 5000) {\n    state_IR_ATAS = IR_ATAS.readSync();\n    state_IR_BAWAH = IR_BAWAH.readSync();\n    if (state_IR_ATAS === 1 || state_IR_BAWAH === 1) {\n        if (!counting) {\n            counting = true;\n            prevCount = Date.now() - count;\n        }\n        stopTimer = Date.now();\n        count = Date.now() - prevCount;\n        Relay.writeSync(1);\n    }\n    else {\n        if (counting) {\n            counting = false;\n        }\n        Relay.writeSync(0);\n    }\n    // setTimeout(() => {\n    //     count += 10;\n    // }, 10);\n}\n\nRelay.writeSync(0);\n\nconst d = new Date();\n\n\nmsg.payload = {\n    finish: 'done',\n    time: d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds(),\n    date: d.getFullYear() + \"-\" + d.getMonth() + \"-\" + d.getDate(),\n    volume: 500,\n    temperature: 'hot'\n}\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "onoff",
                "module": "onoff"
            }
        ],
        "x": 1720,
        "y": 260,
        "wires": [
            [
                "3fe8a8f19bd636d7"
            ]
        ]
    },
    {
        "id": "497afc4d7511892e",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Set Relay Time",
        "func": "\nlet pin_IR_ATAS = 18;\nlet pin_IR_BAWAH = 23;\nlet pin_Relay = 25;\nlet count = 0;\nlet timer = msg.payload * 1000;\nlet counting = false;\nlet prevCount = 0;\nlet state_IR_ATAS = 0;\nlet state_IR_BAWAH = 0;\n\nconst IR_ATAS = new onoff.Gpio(pin_IR_ATAS, 'in', 'both');\nconst IR_BAWAH = new onoff.Gpio(pin_IR_BAWAH, 'in', 'both');\nconst Relay = new onoff.Gpio(pin_Relay, 'out');\n\nstate_IR_ATAS = IR_ATAS.readSync();\nstate_IR_BAWAH = IR_BAWAH.readSync();\nprevCount = Date.now();\nlet stopTimer = Date.now();\ncount = 0;\n\nwhile (count < timer && Date.now()-stopTimer < 5000) {\n    state_IR_ATAS = IR_ATAS.readSync();\n    state_IR_BAWAH = IR_BAWAH.readSync();\n    if (state_IR_ATAS === 1 || state_IR_BAWAH === 1) {\n        if (!counting) {\n            counting = true;\n            prevCount = Date.now() - count;\n        }\n        stopTimer = Date.now();\n        count = Date.now() - prevCount;\n        Relay.writeSync(1);\n    }\n    else {\n        if (counting) {\n            counting = false;\n        }\n        Relay.writeSync(0);\n    }\n    // setTimeout(() => {\n    //     count += 10;\n    // }, 10);\n}\n\nRelay.writeSync(0);\n\nconst d = new Date();\n\n\nmsg.payload = {\n    finish: 'done',\n    time: d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds(),\n    date: d.getFullYear() + \"-\" + d.getMonth() + \"-\" + d.getDate(),\n    volume: 500,\n    temperature: 'normal'\n}\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "onoff",
                "module": "onoff"
            }
        ],
        "x": 1720,
        "y": 300,
        "wires": [
            [
                "626ec8f2db706571"
            ]
        ]
    },
    {
        "id": "5dce08f35cb8b6cf",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Set Relay Time",
        "func": "\nlet pin_IR_ATAS = 18;\nlet pin_IR_BAWAH = 23;\nlet pin_Relay = 24;\nlet count = 0;\nlet timer = msg.payload * 1000;\nlet counting = false;\nlet prevCount = 0;\nlet state_IR_ATAS = 0;\nlet state_IR_BAWAH = 0;\n\nconst IR_ATAS = new onoff.Gpio(pin_IR_ATAS, 'in', 'both');\nconst IR_BAWAH = new onoff.Gpio(pin_IR_BAWAH, 'in', 'both');\nconst Relay = new onoff.Gpio(pin_Relay, 'out');\n\nstate_IR_ATAS = IR_ATAS.readSync();\nstate_IR_BAWAH = IR_BAWAH.readSync();\nprevCount = Date.now();\nlet stopTimer = Date.now();\ncount = 0;\n\nwhile (count < timer && Date.now()-stopTimer < 5000) {\n    state_IR_ATAS = IR_ATAS.readSync();\n    state_IR_BAWAH = IR_BAWAH.readSync();\n    if (state_IR_ATAS === 1 || state_IR_BAWAH === 1) {\n        if (!counting) {\n            counting = true;\n            prevCount = Date.now() - count;\n        }\n        stopTimer = Date.now();\n        count = Date.now() - prevCount;\n        Relay.writeSync(1);\n    }\n    else {\n        if (counting) {\n            counting = false;\n        }\n        Relay.writeSync(0);\n    }\n    // setTimeout(() => {\n    //     count += 10;\n    // }, 10);\n}\n\nRelay.writeSync(0);\n\nconst d = new Date();\n\n\nmsg.payload = {\n    finish: 'done',\n    time: d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds(),\n    date: d.getFullYear() + \"-\" + d.getMonth() + \"-\" + d.getDate(),\n    volume: 500,\n    temperature: 'cold'\n}\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "onoff",
                "module": "onoff"
            }
        ],
        "x": 1720,
        "y": 340,
        "wires": [
            [
                "a4b0ee05af245390"
            ]
        ]
    },
    {
        "id": "cfa57155488fe092",
        "type": "rpi-gpio in",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "IR Sensor Top",
        "pin": "23",
        "intype": "down",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "c261d518ebc079f0"
            ]
        ]
    },
    {
        "id": "46bc2f93d48c087d",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Reset Waterflow",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 460,
        "wires": [
            [
                "97a3c2112af1fec0"
            ]
        ]
    },
    {
        "id": "42138cb1cb3b3dcd",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "waterflow_Function v1",
        "func": "\n\nlet pulseCount = context.get('pulseCount') || 0;\nlet totalLiters = context.get('totalLiters') || 0;\nlet volumeliters = context.get('volumeliters') || 0;\nconst calibrationFactor = 1; // Ganti dengan faktor kalibrasi sensor Anda\n\nif (msg.payload === 10) {\n    totalLiters = 0;\n    volumeliters = 0;\n} \n\n// Menghitung aliran dan total liter setiap detik\nif (msg.payload === 1) { // Sensor mengirimkan pulsa (misalnya, 1) setiap kali terjadi\n    pulseCount++;\n}\n\nconst duration = 1.0; // durasi dalam detik\nlet flowRate = (pulseCount / calibrationFactor); // aliran dalam liter per detik\ntotalLiters += flowRate * duration; // hitung total liter yang sudah mengalir\nvolumeliters = totalLiters;\n\npulseCount = 0; // reset pulse count\n\n// Simpan nilai di context\ncontext.set('pulseCount', pulseCount);\ncontext.set('totalLiters', totalLiters);\ncontext.set('volumeliters', volumeliters);\n\nmsg.payload = {\n    flowRate: flowRate.toFixed(2),\n    totalLiters: totalLiters.toFixed(2),\n    volumeliters: volumeliters.toFixed(2)\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "04e96e931192cd25",
        "type": "csv",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "time,date,volume,temperature",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 460,
        "wires": [
            [
                "f7de393883dfc617"
            ]
        ]
    },
    {
        "id": "d5c78e7d3ece6868",
        "type": "debug",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "c261d518ebc079f0",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Change to Object",
        "func": "if (msg.payload === 1){\n    msg.payload = {\n        top: '1'\n    }\n}\nelse if (msg.payload === 0){\n    msg.payload = {\n        top: '0'\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 160,
        "wires": [
            [
                "d5c78e7d3ece6868",
                "ce57fc889764cc90"
            ]
        ]
    },
    {
        "id": "ae945c1acac3f873",
        "type": "change",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 260,
        "wires": [
            [
                "ce57fc889764cc90"
            ]
        ]
    },
    {
        "id": "58cd9e4840d784ae",
        "type": "switch",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 280,
        "wires": [
            [
                "ae945c1acac3f873"
            ],
            [
                "996331d83b614a49"
            ]
        ]
    },
    {
        "id": "996331d83b614a49",
        "type": "change",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 300,
        "wires": [
            [
                "ce57fc889764cc90"
            ]
        ]
    },
    {
        "id": "9dbc0a797a97d227",
        "type": "debug",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Debug Link",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 400,
        "wires": []
    },
    {
        "id": "f04b7f82a4777b77",
        "type": "file in",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Data Waterflow",
        "filename": "/home/arthatronic/Documents/waterflow.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 540,
        "wires": [
            [
                "a96796d7a57369e9"
            ]
        ]
    },
    {
        "id": "e6d167a8f11d18c3",
        "type": "debug",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 540,
        "wires": []
    },
    {
        "id": "a96796d7a57369e9",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Parse Data",
        "func": "msg.payload = {\n    nilaiWaterflow: parseFloat(msg.payload),\n    status: 'send'\n    }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 540,
        "wires": [
            [
                "e6d167a8f11d18c3",
                "e70a7eac5aa1292c"
            ]
        ]
    },
    {
        "id": "8180848f581502a1",
        "type": "rpi-gpio in",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Waterflow Pin",
        "pin": "16",
        "intype": "up",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 710,
        "y": 440,
        "wires": [
            [
                "e70a7eac5aa1292c"
            ]
        ]
    },
    {
        "id": "674226255c184b27",
        "type": "inject",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 250,
        "y": 540,
        "wires": [
            [
                "f04b7f82a4777b77"
            ]
        ]
    },
    {
        "id": "97a3c2112af1fec0",
        "type": "file",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Data Waterflow",
        "filename": "/home/arthatronic/Documents/waterflow.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1600,
        "y": 460,
        "wires": [
            [
                "ee35fa8f00e5fb60",
                "8259c8deb91a5620"
            ]
        ]
    },
    {
        "id": "ee35fa8f00e5fb60",
        "type": "debug",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Rset",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 520,
        "wires": []
    },
    {
        "id": "813a5d152d4efffd",
        "type": "file",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Data Waterflow",
        "filename": "/home/arthatronic/Documents/waterflow.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1320,
        "y": 520,
        "wires": [
            [
                "9e715bfcb567f4aa"
            ]
        ]
    },
    {
        "id": "f1c25ce41202d813",
        "type": "function",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "function 1",
        "func": "msg.payload = msg.payload.volumeliters;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 520,
        "wires": [
            [
                "813a5d152d4efffd"
            ]
        ]
    },
    {
        "id": "9e715bfcb567f4aa",
        "type": "debug",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Out Waterflow",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 520,
        "wires": []
    },
    {
        "id": "8259c8deb91a5620",
        "type": "link out",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "Waterflow",
        "mode": "link",
        "links": [
            "ab6dc3d12e5bfd40"
        ],
        "x": 1755,
        "y": 460,
        "wires": []
    },
    {
        "id": "ab6dc3d12e5bfd40",
        "type": "link in",
        "z": "93cd7eb94b5de81b",
        "g": "d578f4fe739b97e1",
        "name": "link in 3",
        "links": [
            "8259c8deb91a5620"
        ],
        "x": 315,
        "y": 500,
        "wires": [
            [
                "f04b7f82a4777b77"
            ]
        ]
    },
    {
        "id": "1c4565af3db20a1f",
        "type": "ui_numeric",
        "z": "e1fca49e72b6731a",
        "name": "",
        "label": "hot250",
        "tooltip": "",
        "group": "2c8dac57508989f9",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.5",
        "className": "",
        "x": 90,
        "y": 200,
        "wires": [
            [
                "dc26363ff11329b0"
            ]
        ]
    },
    {
        "id": "020294989a98ee92",
        "type": "ui_numeric",
        "z": "e1fca49e72b6731a",
        "name": "",
        "label": "normal250",
        "tooltip": "",
        "group": "2c8dac57508989f9",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.5",
        "className": "",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "d0b80d240c3c53ec"
            ]
        ]
    },
    {
        "id": "9f0f7c459752e3e5",
        "type": "ui_numeric",
        "z": "e1fca49e72b6731a",
        "name": "",
        "label": "cold250",
        "tooltip": "",
        "group": "2c8dac57508989f9",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.5",
        "className": "",
        "x": 100,
        "y": 340,
        "wires": [
            [
                "3552c9db48e3f0c5"
            ]
        ]
    },
    {
        "id": "351239395009420c",
        "type": "ui_numeric",
        "z": "e1fca49e72b6731a",
        "name": "",
        "label": "hot500",
        "tooltip": "",
        "group": "2c8dac57508989f9",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.5",
        "className": "",
        "x": 90,
        "y": 400,
        "wires": [
            [
                "db52d612f56843c8"
            ]
        ]
    },
    {
        "id": "9f968df4f3b7665e",
        "type": "ui_numeric",
        "z": "e1fca49e72b6731a",
        "name": "",
        "label": "normal500",
        "tooltip": "",
        "group": "2c8dac57508989f9",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.5",
        "className": "",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "0c08af9743dd7c2f"
            ]
        ]
    },
    {
        "id": "da4bb684ee0a2742",
        "type": "ui_numeric",
        "z": "e1fca49e72b6731a",
        "name": "",
        "label": "cold500",
        "tooltip": "",
        "group": "2c8dac57508989f9",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.5",
        "className": "",
        "x": 100,
        "y": 520,
        "wires": [
            [
                "6412e4b6e82ce819"
            ]
        ]
    },
    {
        "id": "828d50be77520b5e",
        "type": "inject",
        "z": "e1fca49e72b6731a",
        "name": "",
        "props": [
            {
                "p": "payload.type",
                "v": "button1",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1200,
        "wires": [
            [
                "4c09ed93cbc593e6"
            ]
        ]
    },
    {
        "id": "4c09ed93cbc593e6",
        "type": "switch",
        "z": "e1fca49e72b6731a",
        "name": "Switch on type",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "button1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "button2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "button3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "button4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "button5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "button6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 400,
        "y": 1220,
        "wires": [
            [
                "b3ddcf5cb40d5e1f"
            ],
            [],
            [],
            [],
            [],
            [],
            [
                "2bb077c9dcdc1562"
            ]
        ]
    },
    {
        "id": "727e2d20f539982d",
        "type": "inject",
        "z": "e1fca49e72b6731a",
        "name": "Trigger",
        "props": [
            {
                "p": "payload.type",
                "v": "reset",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 70,
        "y": 1340,
        "wires": [
            [
                "4c09ed93cbc593e6"
            ]
        ]
    },
    {
        "id": "b3ddcf5cb40d5e1f",
        "type": "function",
        "z": "e1fca49e72b6731a",
        "name": "Retrieve Number",
        "func": "msg.payload = flow.get('storedNumber1');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1160,
        "wires": [
            [
                "964c82852dca2933"
            ]
        ]
    },
    {
        "id": "964c82852dca2933",
        "type": "debug",
        "z": "e1fca49e72b6731a",
        "name": "Debug Output",
        "active": true,
        "tosidebar": true,
        "tostatus": false,
        "complete": "payload",
        "x": 960,
        "y": 1180,
        "wires": []
    },
    {
        "id": "dc26363ff11329b0",
        "type": "function",
        "z": "e1fca49e72b6731a",
        "name": "Save Number",
        "func": "flow.set('storedNumber1', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d0b80d240c3c53ec",
        "type": "function",
        "z": "e1fca49e72b6731a",
        "name": "Save Number",
        "func": "flow.set('storedNumber2', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "3552c9db48e3f0c5",
        "type": "function",
        "z": "e1fca49e72b6731a",
        "name": "Save Number",
        "func": "flow.set('storedNumber3', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "db52d612f56843c8",
        "type": "function",
        "z": "e1fca49e72b6731a",
        "name": "Save Number",
        "func": "flow.set('storedNumber4', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "0c08af9743dd7c2f",
        "type": "function",
        "z": "e1fca49e72b6731a",
        "name": "Save Number",
        "func": "flow.set('storedNumber5', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "6412e4b6e82ce819",
        "type": "function",
        "z": "e1fca49e72b6731a",
        "name": "Save Number",
        "func": "flow.set('storedNumber6', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "2bb077c9dcdc1562",
        "type": "function",
        "z": "e1fca49e72b6731a",
        "name": "Retrieve Number",
        "func": "msg.payload = flow.get('storedNumber4');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1220,
        "wires": [
            [
                "43e1b6e2b4fc748b"
            ]
        ]
    },
    {
        "id": "43e1b6e2b4fc748b",
        "type": "debug",
        "z": "e1fca49e72b6731a",
        "name": "Debug Output",
        "active": true,
        "tosidebar": true,
        "tostatus": false,
        "complete": "payload",
        "x": 940,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b9ae4669f4d58522",
        "type": "ui_button",
        "z": "e1fca49e72b6731a",
        "name": "",
        "group": "2c8dac57508989f9",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "reset galon",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 650,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "efbb813771569fd4",
        "type": "ui_template",
        "z": "e1fca49e72b6731a",
        "group": "2c8dac57508989f9",
        "name": "Button with Link",
        "order": 1,
        "width": 6,
        "height": 1,
        "format": "<button onclick=\"window.location.href='http://192.168.18.22:1880/refill/index.html';\">Back</button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 660,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "cb63602c7c5b11cf",
        "type": "function",
        "z": "e1fca49e72b6731a",
        "name": "Process Sensor Data",
        "func": "if (msg.payload === 1) {\n    msg.payload = \"Sensor ON\";\n} else if (msg.payload === 0) {\n    msg.payload = \"Sensor OFF\";\n} else {\n    msg.payload = \"Unknown Status\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 620,
        "wires": [
            [
                "dc51c72b1ed83e53",
                "cd0cc82dc6551150"
            ]
        ]
    },
    {
        "id": "dc51c72b1ed83e53",
        "type": "ui_text",
        "z": "e1fca49e72b6731a",
        "group": "2c8dac57508989f9",
        "width": "",
        "height": "",
        "name": "IR Sensor Status",
        "label": "Sensor IR Bawah",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 620,
        "wires": []
    },
    {
        "id": "cd0cc82dc6551150",
        "type": "ui_gauge",
        "z": "e1fca49e72b6731a",
        "name": "IR Sensor Gauge",
        "group": "2c8dac57508989f9",
        "order": 1,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "IR Sensor Gauge",
        "label": "Status",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 1,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 700,
        "wires": []
    },
    {
        "id": "ba6be7c0084a2163",
        "type": "rpi-gpio in",
        "z": "e1fca49e72b6731a",
        "name": "",
        "pin": "24",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 90,
        "y": 620,
        "wires": [
            [
                "cb63602c7c5b11cf"
            ]
        ]
    },
    {
        "id": "9335b52acd541374",
        "type": "function",
        "z": "e1fca49e72b6731a",
        "name": "Process Sensor Data",
        "func": "if (msg.payload === 1) {\n    msg.payload = \"Sensor ON\";\n} else if (msg.payload === 0) {\n    msg.payload = \"Sensor OFF\";\n} else {\n    msg.payload = \"Unknown Status\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 780,
        "wires": [
            [
                "9781f0fa55b60a7f",
                "3e82592a65ad55d4"
            ]
        ]
    },
    {
        "id": "9781f0fa55b60a7f",
        "type": "ui_text",
        "z": "e1fca49e72b6731a",
        "group": "2c8dac57508989f9",
        "width": "",
        "height": "",
        "name": "IR Sensor Status",
        "label": "Sensor IR Atas",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 780,
        "wires": []
    },
    {
        "id": "3e82592a65ad55d4",
        "type": "ui_gauge",
        "z": "e1fca49e72b6731a",
        "name": "IR Sensor Gauge",
        "group": "2c8dac57508989f9",
        "order": 1,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "IR Sensor Gauge",
        "label": "Status",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 1,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 860,
        "wires": []
    },
    {
        "id": "06164c665df4b039",
        "type": "rpi-gpio in",
        "z": "e1fca49e72b6731a",
        "name": "",
        "pin": "23",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 90,
        "y": 780,
        "wires": [
            [
                "9335b52acd541374"
            ]
        ]
    }
]